/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.mcgill.ecse.carshop.application;
import java.sql.Date;

import java.sql.Time;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import ca.mcgill.ecse.carshop.controller.CarShopController;
import ca.mcgill.ecse.carshop.controller.InvalidInputException;
import ca.mcgill.ecse.carshop.model.*;
import ca.mcgill.ecse.carshop.model.BusinessHour.DayOfWeek;
import ca.mcgill.ecse.carshop.model.Technician.TechnicianType;
import ca.mcgill.ecse.carshop.persistence.CarShopPersistence;
import ca.mcgill.ecse.carshop.view.CarShopPage;

public class CarShopApplication {
	private static CarShop myCarShop;
    private static User currentUser;
    private static boolean loginState;
    private static boolean isBusinessHourUpdated;
    private static boolean isAccountUpdated;
    private static int oldNumOfAccount;
    private static String filename = "testdata.carShop";

    public static void main(String[] args) {
        System.out.println(new CarShopApplication().getGreeting());
        
        /*--------------------Test----------------------------*/
//        try {
//        	CarShopController.logIn("owner", "owner");
//			CarShopController.addService("tire-change", 120, "Tire");
//		} catch (InvalidInputException e) {
//			System.out.println(e.getMessage());
//		}
        /*--------------------Test----------------------------*/
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CarShopPage().setVisible(true);
            }
        });
        
        //printCarShopStatus();
          
    }
    
    public static void initializationCarShop() throws Exception {
    	CarShopController.setTime("2021-04-11+09:00");
    	myCarShop=getCarShop();
    	getOwner();
    	CarShopController.customerSignUp("customer1", "12345678");
    	setCurrentUser(getOwner());
    	myCarShop.addTechnician("Tire-Technician", "pass1", Technician.TechnicianType.Tire);
    	myCarShop.addTechnician("Engine-Technician", "pass2", Technician.TechnicianType.Engine);
    	myCarShop.addTechnician("Transmission-Technician", "pass3", Technician.TechnicianType.Transmission);
    	myCarShop.addTechnician("Electronics-Technician", "pass4", Technician.TechnicianType.Electronics);
    	myCarShop.addTechnician("Fluids-Technician", "pass5", Technician.TechnicianType.Fluids);
    	CarShopController.initializeGarage();
    	CarShopController.setupBusinessInformation("CarShop-18","3630 Rue University, Montreal, QC H3A 0C6","514-318-7283","707973013@qq.com");
    	CarShopController.addService("tire-change", 10, "Tire");
    	CarShopController.addService("transmission-check", 75, "Transmission");
    	CarShopController.addService("engine-check", 20, "Engine");
    	CarShopController.addService("electronics-repair", 10, "Electronics");
    	CarShopController.addService("engine-change", 40, "Engine");
    	CarShopController.addBusinessHour("Monday", "9:00", "17:00");
    	CarShopController.addBusinessHour("Tuesday", "9:00", "17:00");
    	CarShopController.addBusinessHour("Wednesday", "9:00", "17:00");
    	CarShopController.addBusinessHour("Thursday", "9:00", "17:00");
    	CarShopController.addBusinessHour("Friday", "9:00", "17:00");
    	CarShopController.addBusinessHour("Saturday", "9:00", "17:00");
    	CarShopController.addBusinessHour("Sunday", "9:00", "17:00");
    	for(Garage g:myCarShop.getGarages()) {
    		Technician t=g.getTechnician();
    		CarShopController.addGarageOpeningHour(t.getUsername(), "Monday", "9:00", "17:00", g.getTechnician().getType().toString());
    		CarShopController.addGarageOpeningHour(t.getUsername(), "Tuesday", "9:00", "17:00", g.getTechnician().getType().toString());
    		CarShopController.addGarageOpeningHour(t.getUsername(), "Wednesday", "9:00", "17:00", g.getTechnician().getType().toString());
    		CarShopController.addGarageOpeningHour(t.getUsername(), "Thursday", "9:00", "17:00", g.getTechnician().getType().toString());
    		CarShopController.addGarageOpeningHour(t.getUsername(), "Friday", "9:00", "17:00", g.getTechnician().getType().toString());
    		CarShopController.addGarageOpeningHour(t.getUsername(), "Saturday", "9:00", "17:00", g.getTechnician().getType().toString());
    		CarShopController.addGarageOpeningHour(t.getUsername(), "Sunday", "9:00", "17:00", g.getTechnician().getType().toString());
    	}
    	CarShopController.addTimeSlot("holiday", "2021-05-20", "9:00", "2021-6-20", "23:59");
    	CarShopController.addTimeSlot("vacation", "2021-04-20", "9:00", "2021-04-27", "13:00");	
    	CarShopController.createCombo("owner","transmission-check-combo", "transmission-check", "tire-change,transmission-check,electronics-repair,engine-check", "false,true,true,false");
    	CarShopController.makeComboAppointment("customer1", "2021-04-13", "transmission-check-combo", "tire-change,electronics-repair,engine-check", "14:00,15:20,15:40,16:00");
    }
    
    public static void scenario1UpdateExistingBusinessHours() throws InvalidInputException {
    	CarShopController.logIn("owner", "owner");
    	CarShopController.updateExistingBusinessHours("Tuesday", "09:00", "Tuesday", "8:00", "19:00");
    }
    
    public static void scenario2AnnouncedNewCombo() throws Exception {
    	CarShopController.logIn("owner", "owner");
    	CarShopController.createCombo("owner", "engine-change-combo", "engine-change", "engine-change,engine-check,transmission-check", "true,false,true");
    }
    
    public static void scenario3CustomerBob() throws Exception {
    	CarShopController.customerSignUp("Bob", "Bob1111");
    }
    
    public static void scenario4BobMakeInvalidApp() throws Exception {
    	CarShopController.logIn("Bob", "Bob1111");
    	CarShopController.makeComboAppointment("Bob", "2021-04-13", "engine-change-combo", "engine-check", "15:00,16:10");
    }
    
    public static void scenario6BobComplete(Appointment a) throws InvalidInputException {
    	CarShopController.setTime("2021-04-13+12:30");
    	CarShopController.ownerStartApp(a);
    	CarShopController.setTime("2021-04-13+13:40");
    	CarShopController.ownerEndAppNormally(a);
    }
    
    public static Appointment scenario5BobMakeValidAppointment() throws InvalidInputException{
    	CarShopController.logIn("Bob", "Bob1111");
    	CarShopController.setTime("2021-04-04+09:00");
    	Appointment a=CarShopController.makeComboAppointment("Bob", "2021-04-13", "engine-change-combo", "engine-check", "13:00,14:10");
    	return a;
    }
    
    public static void scenario7RemoveVacation() throws Exception {
    	CarShopController.logIn("owner", "owner");
    	CarShopController.removeExistingTimeSlot("vacation", "2021-04-20", "09:00", "2021-04-27", "13:00");
    }
    
    public static void  printCarShopStatus() {
    	printBusinessInfo();
    	printOwnerInfo();
    	printCustomerList();
    	printTechnician();
    	printBookableService();
    	printBusinessHour();
    }
    public static void printBusinessInfo() {
    	System.out.println("------------------------------------------CarShop Business Information-------------------------------------------");
    	Business bs=myCarShop.getBusiness();
    	System.out.println("CarShop Name: "+bs.getName());
    	System.out.println("Phone: "+bs.getPhoneNumber());
    	System.out.println("Email: "+bs.getEmail());
    	System.out.println("Address: "+bs.getAddress());
   	
    }
    public static void printOwnerInfo() {
    	System.out.println("-------------------------------------------Owner Information-------------------------------------------");
    	Owner o=getOwner();
    	System.out.println("Owner Username: "+o.getUsername()+"     Owner Password: "+o.getPassword());
    }
    public static void printCustomerList() {
    	System.out.println("-------------------------------------------Customer List-----------------------------------------------");
    	for(Customer c:myCarShop.getCustomers()) {  		
    		System.out.println((myCarShop.getCustomers().indexOf(c)+1)+".Username: "+c.getUsername()+"      Password: "+c.getPassword()+"      TimeNotSHow: "+c.getTimeNotShow());
    		for(Appointment a:c.getAppointments()) {
    			System.out.println("->"+"  Appointment Name: "+a.getBookableService().getName());
    			System.out.print("  ->");
    			for(ServiceBooking sb:a.getServiceBookings()) {
    				TimeSlot ts=sb.getTimeSlot();
    				System.out.println("| "+sb.getService().getName()+" From "+ts.getStartDate()+" "+ts.getStartTime()+" to "+ts.getEndDate()+" "+ts.getEndTime()+" | ");
    				System.out.print("    ");
    			}
    		}
    		System.out.println();
    	}
    }
    
    public static void printTechnician() {
    	System.out.println("-------------------------------------------Technician List-----------------------------------------------");
    	for(Technician t:myCarShop.getTechnicians()) {
    		System.out.println("Username: "+t.getUsername()+"      Password: "+t.getPassword());
    	}
    }
    
    public static void printBookableService() {
    	System.out.println("-------------------------------------------Bookable Service List-----------------------------------------------");
    	for(BookableService bs:myCarShop.getBookableServices()) {
    		if(bs instanceof Service) {
    			Service s = (Service)bs;
    			System.out.println("Service name: "+s.getName()+"            duration: "+s.getDuration());
    		}else {
    			ServiceCombo sc=(ServiceCombo)bs;
    			System.out.println("Service Combo name: "+sc.getName());
    			System.out.println("-> MainService: "+sc.getMainService().getService().getName());
    			System.out.print("-> Optional Service: ");
    			for(ComboItem c:sc.getServices()) {
    				
    				System.out.print("|"+c.getService().getName());    	
    			}
    			System.out.println("\n");
    		}
    		
    	}
    }
    
    public static void printBusinessHour() {
    	System.out.println("-------------------------------------------Business Hour-----------------------------------------------");
    	System.out.println("Regular Business Hours:");
    	for(BusinessHour bh:myCarShop.getBusiness().getBusinessHours()) {
    		System.out.println("Day Of Week: "+bh.getDayOfWeek()+"      StartTime: "+bh.getStartTime()+"      EndTime: "+bh.getEndTime());
    	}
    	System.out.println("Vacation:");
    	for(TimeSlot ts:myCarShop.getBusiness().getVacations()) {
    		System.out.println("From "+ts.getStartDate()+" "+ts.getStartTime()+" to "+ts.getEndDate()+" "+ts.getEndTime());
    	}
    	System.out.println("Holiday:");
    	for(TimeSlot ts:myCarShop.getBusiness().getHolidays()) {
    		System.out.println("From "+ts.getStartDate()+" "+ts.getStartTime()+" to "+ts.getEndDate()+" "+ts.getEndTime());
    	}
    	
    }
    
    
    public String getGreeting() {
        return "Welcome to CarShop-18!";
    }
    
    public static Owner getOwner() {
    	if(myCarShop.hasOwner()==false) {
    		myCarShop.setOwner(new Owner("owner","owner",myCarShop));
    	}
    	return myCarShop.getOwner();
    }
    
    
    
    public static CarShop getCarShop() {
    	 if (myCarShop == null) {
    		 myCarShop = CarShopPersistence.load();
         }

         return myCarShop;
    }
    
    
    /**
     * -----------------------------------------------------------------------------------------------------------------------------------------
     * check current user method
     * @author Shichang Zhang
     * @author Junjian Chen
     * -----------------------------------------------------------------------------------------------------------------------------------------
     */
  
    /**
     * current user login
     * @param user current user
     */
    public static void setCurrentUser(User user) {
        currentUser = user;
       setLoginState(true);
    }
    
    /**
     * current user
     * @return current user
     */
    public static User getCurrentUser() {
        return currentUser;
    }
    
    /**
     * check whether the login is successful.
     * @return whether the login is successful
     */
    public static boolean getLoginState() {
    	return loginState;
    }
    
    /**
     * set the login state
     */
    public static void setLoginState(boolean state) {
    	loginState = state;
    }
    
    /**
	 * check whether carshop has the type of garage indicated by the service name
	 * @param type type of garage indicated by the name in String
	 * @return if carshop has the type, return true.
	 * @author Shichang Zhang
	 */
	public static boolean checkType(String type) {
		boolean isValidName=false;
		switch(type) {
		case "Tire":
			isValidName = true;
			break;
		case "Engine":
			isValidName = true;
			break;
		case "Transmission" :
			isValidName = true;
			break;
		case "Electronics":
			isValidName = true;
			break;
		case "Fluids" :
			isValidName = true;
			break;
		default:
			
		}
		return isValidName;
	}
	
	/**
	 * -----------------------------------------------------------------------------------------------------------------------------------------
	 * check timeSlot methods 
	 * @author John Wang
	 * -----------------------------------------------------------------------------------------------------------------------------------------
	 */
	public static boolean checkTime1BeforeTime2(Date Date1, Time time1, Date date2, Time time2) {

		if (Date1.before(date2) ||  Date1 == date2&& time1.before(time2)) { 
			return true;
		}
		return false;
	}
	
	   /**
	    * 
	    * @param curtTimeSlot
	    * @param compareTimeSlot
	    * @return isOverlapped or not
	    * @author John Wang
	    */
	public static boolean checkTimeSlotOverlapped(TimeSlot curtTimeSlot, TimeSlot compareTimeSlot) {

		Date curStartDate = curtTimeSlot.getStartDate();
		Time curStartTime = curtTimeSlot.getStartTime();
		Date curEnddate = curtTimeSlot.getEndDate();
		Time curEndTime = curtTimeSlot.getEndTime();

		Date compareStartDate = compareTimeSlot.getStartDate();
		Time compareStartTime = compareTimeSlot.getStartTime();
		Date compareEndDate = compareTimeSlot.getEndDate(); 
		Time compareEndTime = compareTimeSlot.getEndTime();

		//--------There are two cases of overlapping-------
		
		//case 1---
		// curTimeSlot                curstart------------------curend
		// compare                              comparestart----------------

		//curstart before comparestart  && comparestart before curend
		if (checkTime1BeforeTime2(curStartDate, curStartTime, compareStartDate, compareStartTime) &&  
		checkTime1BeforeTime2(compareStartDate, compareStartTime, curEnddate, curEndTime)) {
			return true;
		}

		// case 2----
		// curTimeSlot                                         curstart------------------
		// compare                              comparestart----------------compareend
		
		//comparestart before curstart  && curstart before compareend	
		if (checkTime1BeforeTime2(compareStartDate, compareStartTime, curStartDate, curStartTime) &&  
		checkTime1BeforeTime2(curStartDate, curStartTime, compareEndDate, compareEndTime)) {
			return true;
		}
		return false; // if not, they do not overlap
	}
	
	/**
	 * if any TimeSlot in a list of TimeSlot overlapped with a given TimeSlot return true
	 * @param curtTimeSlot a TimeSlot
	 * @param timeSlots a list of TimeSlot
	 * @return isOverlapped
	 * @author John Wang
	 */
	public static boolean checkTimeSlotListOverlapped(TimeSlot curtTimeSlot, List<TimeSlot> timeSlots){
		for (TimeSlot compareTimeSlot: timeSlots) {
			if (checkTimeSlotOverlapped(curtTimeSlot, compareTimeSlot)) {
				return true;
			}
		}
		return false;
	}
	
	
	/**
	 * -----------------------------------------------------------------------------------------------------------------------------------------
	 * Business hour update related methods
	 * @author Shichang Zhang
	 * -----------------------------------------------------------------------------------------------------------------------------------------
     */
	
	/**
	 * set business hour update state
	 * @param state state
	 */
	public static void setBusinessHourUpdateState(boolean state) {
		isBusinessHourUpdated = state;
	}
	
	/**
	 * get business hour update state
	 * @return business hour update state
	 */
	public static boolean getBusinessHourUpdateState() {
		return isBusinessHourUpdated;
	}
	
	
	/**
	 * -----------------------------------------------------------------------------------------------------------------------------------------
	 * Account number related methods
	 * @author Shichang Zhang
	 * -----------------------------------------------------------------------------------------------------------------------------------------
     */
	
	/**
	 * set old nember of accounts to be input number
	 * @param num number
	 */
	public static void setOldNumOfAccount(int num) {
		oldNumOfAccount = num;
	}
	
	/**
	 * get old number of accounts
	 * @return get old number of accounts
	 */
	public static int getOldNumOfAccount() {
		return oldNumOfAccount;
	}
	
	public static int getNumOfAccount() {
		int num=0;
		if(myCarShop.hasOwner()) num++;
		num += myCarShop.getTechnicians().size();
		num += myCarShop.getCustomers().size();
		return num;
	}
	
	
	/**
	 * -----------------------------------------------------------------------------------------------------------------------------------------
	 * account update state related methods
	 * @author 
	 * -----------------------------------------------------------------------------------------------------------------------------------------
	 */
	
	/**
	 * set account update state
	 * @param state state
	 */
	public static void setAccountUpdatedState(boolean state) {
		isAccountUpdated = state;
	}
	
	/**
	 * get account update state
	 * @return account update state
	 */
	public static boolean getAccountUpdatedState() {
		return isAccountUpdated;
	}
	
    
    /**
     * -----------------------------------------------------------------------------------------------------------------------------------------
     * Find Method
     * Find Something with Name(String) as inputs
     * Find Something with type(enum TechnicianType) as inputs
     * @author Shichang Zhang
     * @author Junjian Chen
     * -----------------------------------------------------------------------------------------------------------------------------------------
     */
    
    /**
     * find service with the input service name
     * @param name service name
     * @return found service
     */
    public static Service findService(String name) {
		for (BookableService s : getCarShop().getBookableServices()) {
			if (s.getName().equals(name) && (s instanceof Service)) {
				return (Service) s;
			}
		}
		return null;
	}
    
    /**
     * find service with the input service name
     * @param name service name
     * @return found service
     */
    public static Service findServiceWithName(String name) {
		for(BookableService service:getCarShop().getBookableServices()){
			if(service.getName().equals(name) && service instanceof Service) {
				return (Service) service;
			}
		}
		return null;
	}
    
    /**
     * find service combo indicated by the name
     * @param name service combo name
     * @return service combo
     */
    public static ServiceCombo findCombo (String name) {
		CarShop mycs=getCarShop();
		ServiceCombo myCombo = (ServiceCombo) BookableService.getWithName(name);
		return myCombo;
	}
	
    /**
     * Find user from the username
     * @param username username
     * @return the user account containing the username
     */
	public static User findUserFromUsername(String username) {
		User user = null;
		String [] words = username.split("-");
		if(username.equals("owner")) {
			user = myCarShop.getOwner();
		}else if (words.length==2 && CarShopApplication.checkType(words[0]) && words[1].equals("Technician")) {
			user = getTechnicianFromTechnicianType(getTechnicianTypeFromString(words[0]));
		}else{
			for(Customer customer :myCarShop.getCustomers()) {
				if(customer.getUsername().equals(username)) {
					user = customer;
					break;
				}
			}
		}
		return user;
	}
	
	/**
	 * find the matched day from the input string
	 * @param type the string indicated the desire day
	 * @return the desire day
	 */
	public static DayOfWeek getDayOfWeekFromString(String dayString) {
		DayOfWeek day= null;
		switch(dayString) {
		case "Monday":
			day = DayOfWeek.Monday;
			break;
		case "Tuesday":
			day = DayOfWeek.Tuesday;
			break;
		case "Wednesday" :
			day = DayOfWeek.Wednesday;
			break;
		case "Thursday":
			day = DayOfWeek.Thursday;
			break;
		case "Friday" :
			day = DayOfWeek.Friday;
			break;
		case "Saturday":
			day = DayOfWeek.Saturday;
			break;
		case "Sunday" :
			day = DayOfWeek.Sunday;
			break;
		default:
			
		}
		return day;
	}
	
	/**
	 * find the matched technician type from the input string
	 * @param type the string indicated the desire technician type
	 * @return the desire technician type
	 */
	public static TechnicianType getTechnicianTypeFromString(String type) {
		TechnicianType technicianType= null;
		switch(type) {
		case "Tire":
			technicianType = TechnicianType.Tire;
			break;
		case "Engine":
			technicianType = TechnicianType.Engine;
			break;
		case "Transmission" :
			technicianType = TechnicianType.Transmission;
			break;
		case "Electronics":
			technicianType = TechnicianType.Electronics;
			break;
		case "Fluids" :
			technicianType = TechnicianType.Fluids;
			break;
		default:
			
		}
		return technicianType;
	}
	
	/**
	 * get technician from technician type
	 * @param type technician type
	 * @return technician
	 */
	public static Technician getTechnicianFromTechnicianType(TechnicianType type) {
		for(Technician technician : myCarShop.getTechnicians()) {
			if(technician.getType().equals(type)) {
				return technician;
			}
		}
		return null;
	}
	
	/**
	 * get garage from technician type
	 * @param type technician type
	 * @return garage
	 */
	public static Garage getGarageFromTechnicianType(TechnicianType type) {
		for(Garage garage : myCarShop.getGarages()) {
			if(garage.getTechnician().getType().equals(type)) {
				return garage;
			}
		}
		return null;
	}	
	
	/**
	 * This method gets the number of Service Combos in the system
	 * @return number of Service Combos in the system
	 */
	public static int numOfCombo() {
		int count=0;
		for (BookableService s : CarShopApplication.getCarShop().getBookableServices()) {
			if (s instanceof ServiceCombo) {
				count++;
			}
		}
		return count;
	}
	
	/**
	 * Find servicebookings on a date
	 * @param myDate
	 * @return List of ServiceBooking on that date
	 */
	public static List<ServiceBooking> findServiceBookingtByDate(Date myDate){
		List<ServiceBooking> aList=new ArrayList<ServiceBooking>();
		for(Appointment a:myCarShop.getAppointments()) {
			for(ServiceBooking s:a.getServiceBookings()) {
				if(s.getTimeSlot().getStartDate().compareTo(myDate)==0) {
					aList.add(s);
				}
			}
		}
		return aList;
	}
	
	/**
	 * Find time, given a startTime and passing the time of duration
	 * @param startTime
	 * @param duration   number of minutes
	 * @return the time after passing time of duration
	 * @author Junjian Chen
	 */
	public static Time afterTime(String startTime, int duration) {
		int hour=(int)Math.floor(duration/60);
		int minutes=duration%60;
		String[] startTimeArray=startTime.split(":");
		int newMinutes=Integer.parseInt(startTimeArray[1])+minutes;
		int newHour=Integer.parseInt(startTimeArray[0]);
		if(newMinutes>=60) {
			newHour=newHour+hour+1;
			newMinutes-=60;
		}else {
			newHour=newHour+hour;
		}
		Time time=Time.valueOf(newHour+":"+newMinutes+":00");
		return time;
	}
	
	/**
	 * Find the appointment of a customer for a bookableService on a date
	 * @param c Customer
	 * @param bs BookableService
	 * @param d Date
	 * @return an Appointment
	 */
	public static Appointment findAppByCustomerAndBookableServiceAndDate(Customer c,BookableService bs,Date d) {
		if(c==null) return null;
		for(Appointment a:c.getAppointments()) {
			if(a.getBookableService().getName().equals(bs.getName())) {
				if(a.getServiceBooking(0).getTimeSlot().getStartDate().compareTo(d)==0) {
					return a;
				}
			}
		}
		return null;
	}
	
	/**
	 * Find the appointment of a customer for a bookableService on a date
	 * @param c Customer
	 * @param bs BookableService
	 * @param d Date
	 * @param t Start time
	 * @return an Appointment
	 */
	public static Appointment findAppByCustomerAndBookableServiceAndDateAndTime(Customer c,BookableService bs,Date d,Time startTime) {
		if(c==null || bs==null || d==null || startTime==null) return null;
		for(Appointment a:c.getAppointments()) {
			if(a.getBookableService().getName().equals(bs.getName())) {
				if(a.getServiceBooking(0).getTimeSlot().getStartDate().compareTo(d)==0) {
					if(a.getServiceBookings().get(0).getTimeSlot().getStartTime().compareTo(startTime)==0) return a;
				}
			}
		}
		return null;
	}
	
	/**
	 * Find a Bookable Service with name
	 * @param name
	 * @return BookableService with name name
	 */
	public static BookableService findBookableService(String name) {
		for(BookableService bs:myCarShop.getBookableServices()) {
			if(bs.getName().equals(name)) {
				return bs;
			}
		}
		return null;
	}
	
	/**
	 * Find the DayOfWeek of a given date
	 * @param date
	 * @return day of week
	 */
	public static DayOfWeek getWeek(Date date){
		List<DayOfWeek> l=new ArrayList<DayOfWeek>();
		l.add(DayOfWeek.Sunday);
		l.add(DayOfWeek.Monday);
		l.add(DayOfWeek.Tuesday);
		l.add(DayOfWeek.Wednesday);
		l.add(DayOfWeek.Thursday);
		l.add(DayOfWeek.Friday);
		l.add(DayOfWeek.Saturday);
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		int week_index = cal.get(Calendar.DAY_OF_WEEK) - 1;
		if(week_index<0){
			week_index = 0;
		} 
		return l.get(week_index);
	}
	
	/**
	 * Find a customer with its username
	 * @param username
	 * @return Customer
	 */
	public static Customer findCustomer(String username) {
		for(Customer c:myCarShop.getCustomers()) {
			if(c.getUsername().equals(username)) {
				return c;
			}
		}
		return null;
	}
	
	
	
}